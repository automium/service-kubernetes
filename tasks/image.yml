---
- name: image | add apt-transport-https
  apt:
    name: apt-transport-https
    state: present
    update_cache: yes

- name: image | add Kubernetes repository GPG key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg

- name: image | add Kubernetes repository in APT
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present

- name: image | add Gluster repository in APT
  apt_repository:
    repo: "{{ glusterfs_ppa_repo }}"
    codename: "{{ ansible_distribution_release }}"
    state: present

- name: image | install kubernetes binaries
  apt:
    name:
      [
        "kubeadm={{ k8s_version }}-00",
        "kubelet={{ k8s_version }}-00",
        "kubectl={{ k8s_version }}-00",
        "glusterfs-client",
        "nfs-common",
        "python3-pip",
        "python3-venv",
        "python3-dev",
        "jq",
        "unzip"
      ]
    state: present

- name: image | install pip deps
  pip:
    name:
      - python-consul==1.0.0
      - openshift==0.11.2
      - netaddr
    executable: pip3

- name: image | enable kubelet service
  service:
    name: kubelet
    enabled: yes

- name: image | create Kubernetes configuration directory
  file:
    path: /etc/kubernetes
    state: directory
    recurse: yes
    owner: root
    group: root

- name: image | add module dm_thin_pool for thin volumes provisioning
  modprobe:
    name: "{{ item }}"
    state: "present"
  with_items: "{{ kernel_modules }}"
  when: testmode != "true"

- name: image | add module dm_thin_pool for thin volumes provisioning
  lineinfile:
    path: /etc/modules
    state: present
    create: yes
    line: "{{ item }}"
  with_items: "{{ kernel_modules }}"
  when: testmode != "true"

- name: image | create roles requirement
  copy:
    content: |
      - src: automium.consul
        version: 2.1.4
      - src: entercloudsuite.docker
        version: 2.0.5
      - src: entercloudsuite.ansible_cfssl
        version: 1.0.2
      - src: entercloudsuite.filebeat
        version: 1.4.1
    dest: /usr/src/cloud/requirement.yml

- name: image | ensure roles directory exist
  file:
    path: /usr/src/cloud/roles
    state: directory

- name: image | download roles
  shell: |
    source venv/bin/activate
    ansible-galaxy install -r requirement.yml -p roles
  args:
    chdir: /usr/src/cloud
    executable: /bin/bash

- name: image | set docker cgroup driver for test mode
  set_fact:
    docker_cgroup_driver: cgroupfs
  when: testmode == "true"

- name: image | install consul service
  include_role:
    name: automium.consul
    public: yes
  vars:
    consul_version: "{{ service_consul_version }}"
    configure: false
    install: true
    consul_service_status: "stopped"

- name: image | deploy consul check kubernetes-check-node
  copy:
    src: scripts/kubernetes-check-node.sh
    dest: /opt/consul/bin/kubernetes-check-node
    owner: consul
    group: consul
    mode: 0700

- name: image | deploy consul check etcd-consul-check
  copy:
    src: scripts/etcd-consul-check.py
    dest: /opt/consul/bin/etcd-consul-check
    owner: consul
    group: consul
    mode: 0700

- name: image | deploy consul check kubernetes-cpversion-check
  copy:
    src: scripts/kubernetes-cpversion-check.sh
    dest: /opt/consul/bin/kubernetes-cpversion-check
    owner: consul
    group: consul
    mode: 0700

- name: image | make sure consul data is free
  file:
    path: /opt/consul/data
    state: absent

- name: image | import docker role
  include_role:
    name: entercloudsuite.docker
    public: yes
  vars:
    docker_end_status: started
    docker_version: 5:19.03.14~3-0~ubuntu-bionic

- name: image | download Kubernetes system images
  command: "kubeadm config images pull --kubernetes-version v{{ k8s_version }}"

- name: image | download Calico images
  command: "docker pull {{ item }}:{{ calico_version }}"
  with_items:
    - "calico/cni"
    - "calico/pod2daemon-flexvol"
    - "calico/node"
    - "calico/kube-controllers"

- name: image | download Vault
  get_url:
    url: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip"
    dest: /tmp/vault.zip

- name: image | extract Vault binary
  unarchive:
    src: /tmp/vault.zip
    dest: /tmp/
    remote_src: true

- name: image | install Vault binary
  copy:
    src: /tmp/vault
    dest: /usr/local/bin/vault
    remote_src: true
    mode: "0755"

- name: image | cleanup Vault downloaded files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/vault.zip
    - /tmp/vault

- name: image | install calicoctl tools
  get_url:
    url: "{{ calicoctl_download_url }}"
    dest: /usr/local/bin/calicoctl
    mode: '0755'

- name: image | install etcdctl tools in hosts
  shell: |
    #!/bin/bash

    # get etcd image name and version
    IMAGENAME=$(docker image ls | grep etcd | awk '{print $1":"$2 }')
    # copy etcdctl from container to hosts

    ID=$(docker create $IMAGENAME echo)
    docker cp $ID:/usr/local/bin/etcdctl /usr/local/bin/etcdctl
    docker rm -v $ID

- name: image | add usefull environment variables
  blockinfile:
    path: /root/.bashrc
    block: |
      # ETCDCTL Env Vars
      export ETCDCTL_API=3
      export ETCDCTL_CACERT=/etc/kubernetes/pki/etcd/ca.crt
      export ETCDCTL_CERT=/etc/kubernetes/pki/etcd/peer.crt
      export ETCDCTL_KEY=/etc/kubernetes/pki/etcd/peer.key
      export ETCDCTL_ENDPOINTS='https://127.0.0.1:2379'
      # Calicoctl Env Vars
      export DATASTORE_TYPE=etcdv3
      export ETCD_ENDPOINTS=https://127.0.0.1:2379
      export ETCD_KEY_FILE=/etc/calico/pki/node-calico-key.pem
      export ETCD_CERT_FILE=/etc/calico/pki/node-calico.pem
      export ETCD_CA_CERT_FILE=/etc/calico/pki/ca.crt

- name: image | stop Docker
  systemd:
    name: docker
    state: stopped

- name: image | lock Docker and Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubectl
    - kubelet
    - kubeadm
    - kubernetes-cni
    - docker-ce
    - ipset

- name: image | remove useless dependecy
  apt:
    name: ["unattended-upgrades"]
    state: absent

- name: image | create  NetworkManager/conf.d directory
  file:
    path: /etc/NetworkManager/conf.d
    state: directory
    mode: '0755'

- name: image | configure network manager for working wit calico
  copy:
    src: calico/network_manager.conf
    dest: /etc/NetworkManager/conf.d/calico.conf

- name: prevent out of space in the conntrack table
  sysctl:
    name: net.netfilter.nf_conntrack_max
    value: '1000000'
    sysctl_set: yes
    state: present
    reload: yes

- name: image | install cfssl binary
  include_role:
    name: entercloudsuite.ansible_cfssl
    public: yes
  vars:
    install: True
    configure: False
    download_list:
      - "{{ cfssl_pkg.cfssl }}"
      - "{{ cfssl_pkg.cfssljson }}"

- name: image | install filebeat
  include_role:
    name: entercloudsuite.filebeat

- name: image | create kubernetes scripts folder
  file:
    dest: /usr/local/bin/kubernetes-scripts
    state: directory

- name: image | create cleanup script folders
  file:
    dest: /usr/local/bin/etcd-scripts
    state: directory

- name: image | create remove-etcd script
  template:
    src: remove-etcd.py.j2
    dest: /usr/local/bin/etcd-scripts/remove-etcd
    mode: 0755

# Build image
- name: image | create autoscaler-restart script
  template:
    src: autoscaler/autoscaler-restart.sh.j2
    dest: /opt/consul/bin/autoscaler-restart
    mode: 0755

- name: image | reduce noise in falco audit disabling services
  service: name={{ item }} enabled=no
  with_items:
    - apt-daily.timer
    - apt-daily-upgrade.timer
    - motd-news.timer

- name: image | reduce noise in falco audit removing packages
  package: name={{ item }}
  with_items:
    - ubuntu-release-upgrader-core
    - update-notifier-common

- name: image | reduce noise in falco audit
  file: path={{ item }} state=absent
  with_items:
    - /etc/cron.daily/dpkg
    - /etc/cron.daily/man-db
    - /etc/cron.daily/mlocate
    - /etc/cron.daily/ubuntu-advantage-tools
    - /etc/cron.daily/apt-compat
    - /etc/cron.weekly/update-notifier-common
    - /etc/cron.weekly/man-db
    - /etc/update-motd.d
    - /var/run/motd.dynamic

- name: image | install kernel headers
  apt:
    name: "linux-headers-{{ ansible_kernel }}"
    state: present
  when:
    - testmode != "true"

- name: image | add falco key
  apt_key:
    url: https://falco.org/repo/falcosecurity-3672BA8F.asc
    state: present
  register: pkg_result
  until: pkg_result is success
  when:
    - testmode != "true"

- name: image | add falco repo
  apt_repository:
    repo: deb https://download.falco.org/packages/deb stable main
    state: present
  when:
    - testmode != "true"

- name: image | install falco
  apt:
    name: falco
    state: present
    update_cache: yes
  register: pkg_result
  until: pkg_result is success
  when:
    - testmode != "true"

- name: image | configure journald
  template:
    src: journald.conf.j2
    dest: /etc/systemd/journald.conf
    mode: 0644

- name: image | configure systemd-resolved
  template:
    src: resolved.conf.j2
    dest: /etc/systemd/resolved.conf
    mode: 0644

- name: image | remove Kubernetes repository from APT lists
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: absent

- name: image | remove Falco repository from APT lists
  apt_repository:
    repo: deb https://dl.bintray.com/falcosecurity/deb stable main
    state: absent
  when:
    - testmode != "true"
